1. 깃허브는 분산 버전 관리 툴인 깃(Git)을 사용하는 프로젝트를 지원하는
웹호스팅 서비스이다. 팀프로젝트와 같은 것을 관리할 떄 유용하다.

새로운 저장소 만들기 (git init)
저장소 받아오기 git clone(로컬 저장소/원격 서버 저장소)
로컬 저장소는 작업 디렉토리/인덱스/HEAD로 구성되어 있다.
작업 디렉토리(실제 파일들), 인덱스(준비 영역), HEAD(최종 확정본, 커밋)
변경된 파일들에 대한 관리가 가능하다.

git add <파일이름> -> 추가
git commit -m "이번 확정본에 대한 설명" -> 변경된 파일이 HEAD에 반영(원격 저장소 반영 X)

git push origin master -> 변경 내용은 원격 서버로 보냄. master를 원하는 가지 이름으로 바꾸면 다른 가지를 발행한다.
git remote add origin <원격 서버 주소> -> 기존의 원격 저장소를 복제한 것이 아니라면, 원격 서버의 주소를 git에게 알려줘야 함.

git checkout -b name -> name이라는 이름의 가지를 만들고 갈아탐.
git checkout master -> master 가지로 돌아온다.
git branch -d name -> name이라는 가지를 삭제함.
새로 만든 가지를 원격 저장소로 전송하기 전까지는 다른 사람들이 접근할 수 없다.
git push origin name -> name이라는 가지를 원격 저장소로 전송

git pull -> 로컬 저장소를 원격 저장소에 맞춰서 갱신
해당 명령어를 통해 로컬 작업 디렉토리에 받아지고, 병합이 됩니다.
git merge <가지 이름> -> 다른 가지의 변경 내용을 현재 가지에 병합

위의 두 명령에서 가끔 충돌이 발생하는데, 이렇게 되면 충돌하는 부분을 직접 수정해서 병합이 가능하도록 해야 한다.

git add <파일 이름> -> 파일을 병합하는 명령
git diff <원래 가지> <비교 대상 가지> -> 변경 내용 병합 전에 어떻게 바뀌는지 비교할 수 있음.

git tag 1.0.0 1b2e1d63ff -> 1.0.0 이라는 꼬리표를 달아준다. 뒷 부분인 1b2e1d63ff는 꼬리표가 가리키는 확정본 식별자임.
git log -> 확정본 식별자를 얻어오는 명령어.

확정본 식별자의 앞부분 일부만 입력해도 꼬리표를 붙일 수 있지만, 해당 부분이 고유하다는 조건이 필요함.

git checkout -- <파일 이름> -> 로컬의 변경 내용을 변경 전 상태(HEAD)로 되돌려 줌. 단, 이미 인덱스에 추가된 변경 내용과 새로운 파일은 그대로 남음.
git fetch origin -> 원격 저장소의 최신 이력을 가져옴.
git reset --hard origin/master -> 로컬 master 가지가 해당 이력을 가리키도록 함.

gitk -> git의 내장 GUI
git config color.ui true -> git output을 컬러로 출력
git config format.pretty oneline -> 이력에서 확정본 1개를 딱 한 줄로만 표시하기
git add -i -> 파일을 대화식으로 추가하기

2. 

Name

>>> first = "hyeonho"
>>> last = "choi"
>>> name = first + last
>>> name
'hyeonhochoi'
>>> name = first + " " + last
>>> name
'hyeonho choi'
>>> name * 2
'hyeonho choihyeonho choi'
>>> name * 3
'hyeonho choihyeonho choihyeonho choi'
>>> name[0]
'h'
>>> name[4]
'n'

Slice

>>> title = "2D GAME PROGRAMMING WITH PYTHON"
>>> title[0:6]
'2D GAM'
>>> title[7:9]
' P'
>>> title[10:14]
'OGRA'
>>> title[:6]
'2D GAM'
>>> title[-11:]
'WITH PYTHON'
>>> title[::2]
'2 AEPORMIGWT YHN'
>>> title[::-1]
'NOHTYP HTIW GNIMMARGORP EMAG D2'

List

>>> Gfriend = [ 'Yuju', 'Sowon', 'Eunha', 'Yerin', 'SinBi', 'Umji']
>>> black_pink = ['Jisu', 'Jenny', 'Rose', 'Risa']
>>> Gfriend
['Yuju', 'Sowon', 'Eunha', 'Yerin', 'SinBi', 'Umji']
>>> Gfriend.append('Girl')
>>> Gfriend
['Yuju', 'Sowon', 'Eunha', 'Yerin', 'SinBi', 'Umji', 'Girl']
>>> Gfriend.sort()
>>> Gfriend
['Eunha', 'Girl', 'SinBi', 'Sowon', 'Umji', 'Yerin', 'Yuju']
>>> unit = black_pink + Gfriend
>>> unit
['Jisu', 'Jenny', 'Rose', 'Risa', 'Eunha', 'Girl', 'SinBi', 'Sowon', 'Umji', 'Yerin', 'Yuju']
>>> unit.remove('Rose')
>>> unit
['Jisu', 'Jenny', 'Risa', 'Eunha', 'Girl', 'SinBi', 'Sowon', 'Umji', 'Yerin', 'Yuju']

Dictionary

>>> score = { 'momo' : 100, 'zwi' : 99, 'sana' : 12 }
>>> type(score)
<class 'dict'>
>>> score['momo']
100
>>> score['hyeonho']
Traceback (most recent call last):
  File "<pyshell#49>", line 1, in <module>
    score['hyeonho']
KeyError: 'hyeonho'
>>> score['hyeonho'] = 90
>>> score
{'momo': 100, 'zwi': 99, 'sana': 12, 'hyeonho': 90}
>>> score.keys()
dict_keys(['momo', 'zwi', 'sana', 'hyeonho'])
>>> score.values()
dict_values([100, 99, 12, 90])
>>> del score['momo']
>>> score.values()
dict_values([99, 12, 90])
>>> score.keys()
dict_keys(['zwi', 'sana', 'hyeonho'])
>>> 'zwi' in score
True
>>> 'momo' in score
False
>>> score.clear()
>>> score
{}

Tuple

>>> t1 = (1, 3, 7)
>>> t2 = (1, )
>>> t3 = ()
>>> t4 = 1, 5, 6 , 12
>>> t4
(1, 5, 6, 12)
>>> type(t4)
<class 'tuple'>
>>> t5 = (3, 'b', 'cat', (2,3))
>>> t1[1:]
(3, 7)
>>> t1 + t5
(1, 3, 7, 3, 'b', 'cat', (2, 3))
>>> t4 * t4
Traceback (most recent call last):
  File "<pyshell#70>", line 1, in <module>
    t4 * t4
TypeError: can't multiply sequence by non-int of type 'tuple'
>>> t4 * 3
(1, 5, 6, 12, 1, 5, 6, 12, 1, 5, 6, 12)

set

>>> s1 = {1, 2, 3, 4}
>>> type(s1)
<class 'set'>
>>> s1 = {1, 2, 2, 12}
>>> s1
{1, 2, 12}
>>> l1 = [1,2,2,2,3,3,3,3,4,4,4,5,5,8,9,9,10]
>>> s1 = set(l1)
>>> s1
{1, 2, 3, 4, 5, 8, 9, 10}
>>> s2 = {3, 5, 6, 7, 9}
>>> s1 + s2
Traceback (most recent call last):
  File "<pyshell#85>", line 1, in <module>
    s1 + s2
TypeError: unsupported operand type(s) for +: 'set' and 'set'
>>> s1 | s2
{1, 2, 3, 4, 5, 6, 7, 8, 9, 10}
>>> s1 & s2
{9, 3, 5}
>>> s2 - s1
{6, 7}
>>> s1 - s2
{1, 2, 4, 8, 10}
>>> s1.add(17)
>>> s1
{1, 2, 3, 4, 5, 8, 9, 10, 17}
>>> s2.remove(12)
Traceback (most recent call last):
  File "<pyshell#92>", line 1, in <module>
    s2.remove(12)
KeyError: 12
>>> s2.remove(6)
>>> s2
{3, 5, 7, 9}

기존에 하던 코딩과 다른 느낌이 들어서 신기하고 재미 있었다. 새로운 것에 대한 호기심이 많은 편이라 재미 있게 따라하고 변형해 보았던 것 같다.
